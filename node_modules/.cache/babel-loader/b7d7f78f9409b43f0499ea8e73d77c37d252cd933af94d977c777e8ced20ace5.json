{"ast":null,"code":"// ⚠️⚠️⚠️ ЗАМЕНИ ЭТОТ КЛЮЧ НА СВОЙ РЕАЛЬНЫЙ API КЛЮЧ ⚠️⚠️⚠️\nconst API_KEY = \"dc7a1e56f6b4445c3d8a8b6a7b5c4a3a\"; // Это пример, замени на свой!\n\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nlet cache = {};\nconst CACHE_DURATION = 5 * 60 * 1000;\nexport const fetchCurrentWeather = async city => {\n  const cacheKey = `current_${city}`;\n  const cached = cache[cacheKey];\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  const response = await fetch(`${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`);\n  if (!response.ok) {\n    throw new Error('Ошибка получения данных о погоде');\n  }\n  const data = await response.json();\n  cache[cacheKey] = {\n    data,\n    timestamp: Date.now()\n  };\n  return data;\n};\nexport const fetchWeatherForecast = async city => {\n  const cacheKey = `forecast_${city}`;\n  const cached = cache[cacheKey];\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  const response = await fetch(`${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=ru`);\n  if (!response.ok) {\n    throw new Error('Ошибка получения прогноза погоды');\n  }\n  const data = await response.json();\n  cache[cacheKey] = {\n    data,\n    timestamp: Date.now()\n  };\n  return data;\n};","map":{"version":3,"names":["API_KEY","BASE_URL","cache","CACHE_DURATION","fetchCurrentWeather","city","cacheKey","cached","Date","now","timestamp","data","response","fetch","ok","Error","json","fetchWeatherForecast"],"sources":["D:/code/react-weather/src/services/weatherServices.tsx"],"sourcesContent":["export interface WeatherData {\r\n  name: string;\r\n  main: {\r\n    temp: number;\r\n    feels_like: number;\r\n    pressure: number;\r\n    humidity: number;\r\n  };\r\n  weather: {\r\n    description: string;\r\n    icon: string;\r\n    main: string;\r\n  }[];\r\n  wind: {\r\n    speed: number;\r\n  };\r\n  sys: {\r\n    country: string;\r\n  };\r\n  dt: number;\r\n}\r\n\r\nexport interface ForecastData {\r\n  list: ForecastItem[];\r\n  city: {\r\n    name: string;\r\n    country: string;\r\n  };\r\n}\r\n\r\nexport interface ForecastItem {\r\n  dt: number;\r\n  main: {\r\n    temp: number;\r\n    feels_like: number;\r\n    pressure: number;\r\n    humidity: number;\r\n  };\r\n  weather: {\r\n    description: string;\r\n    icon: string;\r\n    main: string;\r\n  }[];\r\n  wind: {\r\n    speed: number;\r\n  };\r\n  dt_txt: string;\r\n}\r\n\r\n// ⚠️⚠️⚠️ ЗАМЕНИ ЭТОТ КЛЮЧ НА СВОЙ РЕАЛЬНЫЙ API КЛЮЧ ⚠️⚠️⚠️\r\nconst API_KEY = \"dc7a1e56f6b4445c3d8a8b6a7b5c4a3a\"; // Это пример, замени на свой!\r\n\r\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\r\n\r\nlet cache: { [key: string]: { data: any, timestamp: number } } = {};\r\nconst CACHE_DURATION = 5 * 60 * 1000;\r\n\r\nexport const fetchCurrentWeather = async (city: string): Promise<WeatherData> => {\r\n  const cacheKey = `current_${city}`;\r\n  const cached = cache[cacheKey];\r\n  \r\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\r\n    return cached.data;\r\n  }\r\n\r\n  const response = await fetch(\r\n    `${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`\r\n  );\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Ошибка получения данных о погоде');\r\n  }\r\n  \r\n  const data = await response.json();\r\n  \r\n  cache[cacheKey] = {\r\n    data,\r\n    timestamp: Date.now()\r\n  };\r\n  \r\n  return data;\r\n};\r\n\r\nexport const fetchWeatherForecast = async (city: string): Promise<ForecastData> => {\r\n  const cacheKey = `forecast_${city}`;\r\n  const cached = cache[cacheKey];\r\n  \r\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\r\n    return cached.data;\r\n  }\r\n\r\n  const response = await fetch(\r\n    `${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=ru`\r\n  );\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Ошибка получения прогноза погоды');\r\n  }\r\n  \r\n  const data = await response.json();\r\n  \r\n  cache[cacheKey] = {\r\n    data,\r\n    timestamp: Date.now()\r\n  };\r\n  \r\n  return data;\r\n};"],"mappings":"AAiDA;AACA,MAAMA,OAAO,GAAG,kCAAkC,CAAC,CAAC;;AAEpD,MAAMC,QAAQ,GAAG,yCAAyC;AAE1D,IAAIC,KAA0D,GAAG,CAAC,CAAC;AACnE,MAAMC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;AAEpC,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,IAAY,IAA2B;EAC/E,MAAMC,QAAQ,GAAG,WAAWD,IAAI,EAAE;EAClC,MAAME,MAAM,GAAGL,KAAK,CAACI,QAAQ,CAAC;EAE9B,IAAIC,MAAM,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,MAAM,CAACG,SAAS,GAAGP,cAAc,EAAE;IAC5D,OAAOI,MAAM,CAACI,IAAI;EACpB;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGZ,QAAQ,cAAcI,IAAI,UAAUL,OAAO,uBAChD,CAAC;EAED,IAAI,CAACY,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACrD;EAEA,MAAMJ,IAAI,GAAG,MAAMC,QAAQ,CAACI,IAAI,CAAC,CAAC;EAElCd,KAAK,CAACI,QAAQ,CAAC,GAAG;IAChBK,IAAI;IACJD,SAAS,EAAEF,IAAI,CAACC,GAAG,CAAC;EACtB,CAAC;EAED,OAAOE,IAAI;AACb,CAAC;AAED,OAAO,MAAMM,oBAAoB,GAAG,MAAOZ,IAAY,IAA4B;EACjF,MAAMC,QAAQ,GAAG,YAAYD,IAAI,EAAE;EACnC,MAAME,MAAM,GAAGL,KAAK,CAACI,QAAQ,CAAC;EAE9B,IAAIC,MAAM,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,MAAM,CAACG,SAAS,GAAGP,cAAc,EAAE;IAC5D,OAAOI,MAAM,CAACI,IAAI;EACpB;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGZ,QAAQ,eAAeI,IAAI,UAAUL,OAAO,uBACjD,CAAC;EAED,IAAI,CAACY,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACrD;EAEA,MAAMJ,IAAI,GAAG,MAAMC,QAAQ,CAACI,IAAI,CAAC,CAAC;EAElCd,KAAK,CAACI,QAAQ,CAAC,GAAG;IAChBK,IAAI;IACJD,SAAS,EAAEF,IAAI,CAACC,GAAG,CAAC;EACtB,CAAC;EAED,OAAOE,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}