{"ast":null,"code":"// services/weatherService.ts\n\nconst API_KEY = \"your_api_key_here\"; // Замени на свой ключ\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nexport const fetchCurrentWeather = async city => {\n  const response = await fetch(`${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`);\n  if (!response.ok) {\n    throw new Error('Ошибка получения данных о погоде');\n  }\n  return response.json();\n};\nexport const fetchWeatherForecast = async city => {\n  const response = await fetch(`${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=ru`);\n  if (!response.ok) {\n    throw new Error('Ошибка получения прогноза погоды');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_KEY","BASE_URL","fetchCurrentWeather","city","response","fetch","ok","Error","json","fetchWeatherForecast"],"sources":["D:/code/react-weather/src/services/weatherServices.tsx"],"sourcesContent":["// services/weatherService.ts\r\nexport interface WeatherData {\r\n  name: string;\r\n  main: {\r\n    temp: number;\r\n    feels_like: number;\r\n    pressure: number;\r\n    humidity: number;\r\n  };\r\n  weather: {\r\n    description: string;\r\n    icon: string;\r\n    main: string;\r\n  }[];\r\n  wind: {\r\n    speed: number;\r\n  };\r\n  sys: {\r\n    country: string;\r\n  };\r\n  dt: number;\r\n}\r\n\r\nconst API_KEY = \"your_api_key_here\"; // Замени на свой ключ\r\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\r\n\r\nexport const fetchCurrentWeather = async (city: string): Promise<WeatherData> => {\r\n  const response = await fetch(\r\n    `${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`\r\n  );\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Ошибка получения данных о погоде');\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\nexport const fetchWeatherForecast = async (city: string) => {\r\n  const response = await fetch(\r\n    `${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=ru`\r\n  );\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Ошибка получения прогноза погоды');\r\n  }\r\n  \r\n  return response.json();\r\n};"],"mappings":"AAAA;;AAuBA,MAAMA,OAAO,GAAG,mBAAmB,CAAC,CAAC;AACrC,MAAMC,QAAQ,GAAG,yCAAyC;AAE1D,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,IAAY,IAA2B;EAC/E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGJ,QAAQ,cAAcE,IAAI,UAAUH,OAAO,uBAChD,CAAC;EAED,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACrD;EAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAG,MAAON,IAAY,IAAK;EAC1D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGJ,QAAQ,eAAeE,IAAI,UAAUH,OAAO,uBACjD,CAAC;EAED,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACrD;EAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}