{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\react-weather\\\\src\\\\pages\\\\home\\\\components\\\\Days\\\\Days.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport s from \"./Days.module.scss\";\nimport { Card } from \"./Card\";\nimport { Tabs } from \"./Tabs\";\nimport { fetchWeatherForecast } from \"../../../../services/weatherServices\";\nimport { GlobalSwgSelector } from \"../../../../assets/icons/global/GlobalSwgSelector\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Days = ({\n  city,\n  onDayClick\n}) => {\n  _s();\n  const [forecast, setForecast] = useState(null);\n  const [days, setDays] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('week');\n  useEffect(() => {\n    const loadForecast = async () => {\n      try {\n        setLoading(true);\n        const forecastData = await fetchWeatherForecast(city);\n        setForecast(forecastData);\n        processForecastData(forecastData, activeTab);\n      } catch (error) {\n        console.error(\"Error loading forecast:\", error);\n        setDays(getDefaultDays(activeTab));\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadForecast();\n    const interval = setInterval(() => {\n      loadForecast();\n    }, 30 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, [city]);\n  useEffect(() => {\n    if (forecast) {\n      processForecastData(forecast, activeTab);\n    }\n  }, [activeTab, forecast]);\n  const processForecastData = (forecastData, tab) => {\n    const dailyForecasts = forecastData.list.filter((item, index) => {\n      return index % 8 === 0; // Берем прогноз на каждый день в 12:00\n    });\n    let daysCount = 7;\n    switch (tab) {\n      case '10days':\n        daysCount = 10;\n        break;\n      case 'month':\n        daysCount = 14;\n        break;\n      default:\n        daysCount = 7;\n    }\n    const processedDays = dailyForecasts.slice(0, daysCount).map((forecastItem, index) => {\n      const date = new Date(forecastItem.dt * 1000);\n      const dayNames = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n      const monthNames = ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'];\n      let dayName = '';\n      if (index === 0) {\n        dayName = 'Сегодня';\n      } else if (index === 1) {\n        dayName = 'Завтра';\n      } else {\n        dayName = dayNames[date.getDay()];\n      }\n      const dayInfo = `${date.getDate()} ${monthNames[date.getMonth()]}`;\n      const baseTemp = Math.round(forecastItem.main.temp);\n      const baseFeelsLike = Math.round(forecastItem.main.feels_like);\n      const dayTemp = index < 7 ? baseTemp : baseTemp + Math.floor(Math.random() * 3) - 1;\n      const nightTemp = index < 7 ? baseFeelsLike : baseFeelsLike + Math.floor(Math.random() * 2) - 1;\n      return {\n        day: dayName,\n        day_info: dayInfo,\n        icon_id: getWeatherIcon(forecastItem.weather[0].icon),\n        temp_day: `${dayTemp}°`,\n        temp_night: `${nightTemp}°`,\n        info: forecastItem.weather[0].description,\n        forecastItem: forecastItem\n      };\n    });\n    if (processedDays.length < daysCount) {\n      const lastDay = processedDays[processedDays.length - 1];\n      for (let i = processedDays.length; i < daysCount; i++) {\n        const date = new Date();\n        date.setDate(date.getDate() + i);\n        const dayNames = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n        const monthNames = ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'];\n        processedDays.push({\n          day: i === 0 ? 'Сегодня' : i === 1 ? 'Завтра' : dayNames[date.getDay()],\n          day_info: `${date.getDate()} ${monthNames[date.getMonth()]}`,\n          icon_id: lastDay.icon_id,\n          temp_day: `${Math.round(parseInt(lastDay.temp_day) + Math.floor(Math.random() * 3) - 1)}°`,\n          temp_night: `${Math.round(parseInt(lastDay.temp_night) + Math.floor(Math.random() * 2) - 1)}°`,\n          info: lastDay.info\n        });\n      }\n    }\n    setDays(processedDays);\n  };\n  const getWeatherIcon = iconCode => {\n    const iconMap = {\n      '01d': 'sun',\n      '01n': 'moon',\n      '02d': 'small_sun',\n      '02n': 'small_moon',\n      '03d': 'mainly_cloudy',\n      '03n': 'mainly_cloudy',\n      '04d': 'mainly_cloudy',\n      '04n': 'mainly_cloudy',\n      '09d': 'rain',\n      '09n': 'rain',\n      '10d': 'small_rain_sun',\n      '10n': 'small_rain_moon',\n      '11d': 'lightning',\n      '11n': 'lightning',\n      '13d': 'snow',\n      '13n': 'snow',\n      '50d': 'fog',\n      '50n': 'fog'\n    };\n    return iconMap[iconCode] || 'small_sun';\n  };\n  const getDefaultDays = tab => {\n    const daysCount = tab === '10days' ? 10 : tab === 'month' ? 14 : 7;\n    const today = new Date();\n    const dayNames = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n    const monthNames = ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'];\n    return Array.from({\n      length: daysCount\n    }).map((_, index) => {\n      const date = new Date();\n      date.setDate(today.getDate() + index);\n      return {\n        day: index === 0 ? 'Сегодня' : index === 1 ? 'Завтра' : dayNames[date.getDay()],\n        day_info: `${date.getDate()} ${monthNames[date.getMonth()]}`,\n        icon_id: 'small_sun',\n        temp_day: '+18°',\n        temp_night: '+15°',\n        info: 'Облачно'\n      };\n    });\n  };\n  const handleTabChange = tab => {\n    setActiveTab(tab);\n  };\n  const handleCardClick = day => {\n    if (day.forecastItem) {\n      onDayClick(day.forecastItem);\n    } else {\n      const baseForecastItem = {\n        dt: Math.floor(Date.now() / 1000) + days.findIndex(d => d === day) * 86400,\n        main: {\n          temp: parseInt(day.temp_day),\n          feels_like: parseInt(day.temp_night),\n          pressure: 1013,\n          humidity: 65\n        },\n        weather: [{\n          description: day.info,\n          icon: day.icon_id === 'sun' ? '01d' : day.icon_id === 'rain' ? '10d' : day.icon_id === 'small_rain_sun' ? '09d' : '04d',\n          main: 'Clouds'\n        }],\n        wind: {\n          speed: 3\n        },\n        dt_txt: new Date().toISOString()\n      };\n      onDayClick(baseForecastItem);\n    }\n  };\n  const getDaysCount = () => {\n    switch (activeTab) {\n      case '10days':\n        return 10;\n      case 'month':\n        return 14;\n      default:\n        return 7;\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        activeTab: activeTab,\n        onTabChange: handleTabChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.days,\n        \"data-days-count\": getDaysCount().toString(),\n        children: Array.from({\n          length: getDaysCount()\n        }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.card,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: s.day,\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: s.day_info,\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: s.icon_id,\n            children: /*#__PURE__*/_jsxDEV(GlobalSwgSelector, {\n              id: \"small_sun\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: s.temp_day,\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: s.temp_night,\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: s.info,\n            children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Tabs, {\n      activeTab: activeTab,\n      onTabChange: handleTabChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.days,\n      \"data-days-count\": days.length.toString(),\n      children: days.map((day, index) => /*#__PURE__*/_jsxDEV(Card, {\n        day: day,\n        onClick: () => handleCardClick(day)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Days, \"9Qh1sWZ9x8SEPlAViC/3cGLNiMI=\");\n_c = Days;\nexport default Days;\nvar _c;\n$RefreshReg$(_c, \"Days\");","map":{"version":3,"names":["React","useState","useEffect","s","Card","Tabs","fetchWeatherForecast","GlobalSwgSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","Days","city","onDayClick","_s","forecast","setForecast","days","setDays","loading","setLoading","activeTab","setActiveTab","loadForecast","forecastData","processForecastData","error","console","getDefaultDays","interval","setInterval","clearInterval","tab","dailyForecasts","list","filter","item","index","daysCount","processedDays","slice","map","forecastItem","date","Date","dt","dayNames","monthNames","dayName","getDay","dayInfo","getDate","getMonth","baseTemp","Math","round","main","temp","baseFeelsLike","feels_like","dayTemp","floor","random","nightTemp","day","day_info","icon_id","getWeatherIcon","weather","icon","temp_day","temp_night","info","description","length","lastDay","i","setDate","push","parseInt","iconCode","iconMap","today","Array","from","_","handleTabChange","handleCardClick","baseForecastItem","now","findIndex","d","pressure","humidity","wind","speed","dt_txt","toISOString","getDaysCount","children","onTabChange","fileName","_jsxFileName","lineNumber","columnNumber","className","toString","card","id","onClick","_c","$RefreshReg$"],"sources":["D:/code/react-weather/src/pages/home/components/Days/Days.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport s from \"./Days.module.scss\";\r\nimport { Card } from \"./Card\";\r\nimport { Tabs } from \"./Tabs\";\r\nimport { ForecastData, ForecastItem, fetchWeatherForecast } from \"../../../../services/weatherServices\";\r\nimport { GlobalSwgSelector } from \"../../../../assets/icons/global/GlobalSwgSelector\";\r\n\r\ninterface Props {\r\n  city: string;\r\n  onDayClick: (forecastItem: ForecastItem) => void;\r\n}\r\n\r\nexport interface Day {\r\n  day: string;\r\n  day_info: string;\r\n  icon_id: string;\r\n  temp_day: string;\r\n  temp_night: string;\r\n  info: string;\r\n  forecastItem?: ForecastItem;\r\n}\r\n\r\nexport const Days: React.FC<Props> = ({ city, onDayClick }) => {\r\n  const [forecast, setForecast] = useState<ForecastData | null>(null);\r\n  const [days, setDays] = useState<Day[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState('week');\r\n\r\n  useEffect(() => {\r\n    const loadForecast = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const forecastData = await fetchWeatherForecast(city);\r\n        setForecast(forecastData);\r\n        processForecastData(forecastData, activeTab);\r\n      } catch (error) {\r\n        console.error(\"Error loading forecast:\", error);\r\n        setDays(getDefaultDays(activeTab));\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadForecast();\r\n\r\n    const interval = setInterval(() => {\r\n      loadForecast();\r\n    }, 30 * 60 * 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [city]);\r\n\r\n  useEffect(() => {\r\n    \r\n    if (forecast) {\r\n      processForecastData(forecast, activeTab);\r\n    }\r\n  }, [activeTab, forecast]);\r\n\r\n  const processForecastData = (forecastData: ForecastData, tab: string) => {\r\n    const dailyForecasts = forecastData.list.filter((item, index) => {\r\n      return index % 8 === 0; // Берем прогноз на каждый день в 12:00\r\n    });\r\n\r\n    let daysCount = 7;\r\n    switch (tab) {\r\n      case '10days':\r\n        daysCount = 10;\r\n        break;\r\n      case 'month':\r\n        daysCount = 14; \r\n        break;\r\n      default:\r\n        daysCount = 7;\r\n    }\r\n\r\n    const processedDays: Day[] = dailyForecasts.slice(0, daysCount).map((forecastItem, index) => {\r\n      const date = new Date(forecastItem.dt * 1000);\r\n      const dayNames = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\r\n      const monthNames = ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'];\r\n      \r\n      let dayName = '';\r\n      if (index === 0) {\r\n        dayName = 'Сегодня';\r\n      } else if (index === 1) {\r\n        dayName = 'Завтра';\r\n      } else {\r\n        dayName = dayNames[date.getDay()];\r\n      }\r\n      \r\n      const dayInfo = `${date.getDate()} ${monthNames[date.getMonth()]}`;\r\n\r\n      const baseTemp = Math.round(forecastItem.main.temp);\r\n      const baseFeelsLike = Math.round(forecastItem.main.feels_like);\r\n      \r\n      const dayTemp = index < 7 ? baseTemp : baseTemp + Math.floor(Math.random() * 3) - 1;\r\n      const nightTemp = index < 7 ? baseFeelsLike : baseFeelsLike + Math.floor(Math.random() * 2) - 1;\r\n\r\n      return {\r\n        day: dayName,\r\n        day_info: dayInfo,\r\n        icon_id: getWeatherIcon(forecastItem.weather[0].icon),\r\n        temp_day: `${dayTemp}°`,\r\n        temp_night: `${nightTemp}°`,\r\n        info: forecastItem.weather[0].description,\r\n        forecastItem: forecastItem\r\n      };\r\n    });\r\n\r\n    if (processedDays.length < daysCount) {\r\n      const lastDay = processedDays[processedDays.length - 1];\r\n      for (let i = processedDays.length; i < daysCount; i++) {\r\n        const date = new Date();\r\n        date.setDate(date.getDate() + i);\r\n        const dayNames = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\r\n        const monthNames = ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'];\r\n        \r\n        processedDays.push({\r\n          day: i === 0 ? 'Сегодня' : i === 1 ? 'Завтра' : dayNames[date.getDay()],\r\n          day_info: `${date.getDate()} ${monthNames[date.getMonth()]}`,\r\n          icon_id: lastDay.icon_id,\r\n          temp_day: `${Math.round(parseInt(lastDay.temp_day) + Math.floor(Math.random() * 3) - 1)}°`,\r\n          temp_night: `${Math.round(parseInt(lastDay.temp_night) + Math.floor(Math.random() * 2) - 1)}°`,\r\n          info: lastDay.info,\r\n        });\r\n      }\r\n    }\r\n\r\n    setDays(processedDays);\r\n  };\r\n\r\n  const getWeatherIcon = (iconCode: string) => {\r\n    const iconMap: { [key: string]: string } = {\r\n      '01d': 'sun',\r\n      '01n': 'moon',\r\n      '02d': 'small_sun',\r\n      '02n': 'small_moon',\r\n      '03d': 'mainly_cloudy',\r\n      '03n': 'mainly_cloudy',\r\n      '04d': 'mainly_cloudy',\r\n      '04n': 'mainly_cloudy',\r\n      '09d': 'rain',\r\n      '09n': 'rain',\r\n      '10d': 'small_rain_sun',\r\n      '10n': 'small_rain_moon',\r\n      '11d': 'lightning',\r\n      '11n': 'lightning',\r\n      '13d': 'snow',\r\n      '13n': 'snow',\r\n      '50d': 'fog',\r\n      '50n': 'fog'\r\n    };\r\n    return iconMap[iconCode] || 'small_sun';\r\n  };\r\n\r\n  const getDefaultDays = (tab: string): Day[] => {\r\n    const daysCount = tab === '10days' ? 10 : tab === 'month' ? 14 : 7;\r\n    const today = new Date();\r\n    const dayNames = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\r\n    const monthNames = ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'];\r\n    \r\n    return Array.from({ length: daysCount }).map((_, index) => {\r\n      const date = new Date();\r\n      date.setDate(today.getDate() + index);\r\n      \r\n      return {\r\n        day: index === 0 ? 'Сегодня' : index === 1 ? 'Завтра' : dayNames[date.getDay()],\r\n        day_info: `${date.getDate()} ${monthNames[date.getMonth()]}`,\r\n        icon_id: 'small_sun',\r\n        temp_day: '+18°',\r\n        temp_night: '+15°',\r\n        info: 'Облачно',\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleTabChange = (tab: string) => {\r\n    setActiveTab(tab);\r\n  };\r\n\r\n  const handleCardClick = (day: Day) => {\r\n    if (day.forecastItem) {\r\n      onDayClick(day.forecastItem);\r\n    } else {\r\n      const baseForecastItem: ForecastItem = {\r\n        dt: Math.floor(Date.now() / 1000) + (days.findIndex(d => d === day) * 86400),\r\n        main: {\r\n          temp: parseInt(day.temp_day),\r\n          feels_like: parseInt(day.temp_night),\r\n          pressure: 1013,\r\n          humidity: 65\r\n        },\r\n        weather: [{\r\n          description: day.info,\r\n          icon: day.icon_id === 'sun' ? '01d' : \r\n                day.icon_id === 'rain' ? '10d' : \r\n                day.icon_id === 'small_rain_sun' ? '09d' : '04d',\r\n          main: 'Clouds'\r\n        }],\r\n        wind: {\r\n          speed: 3\r\n        },\r\n        dt_txt: new Date().toISOString()\r\n      };\r\n      onDayClick(baseForecastItem);\r\n    }\r\n  };\r\n\r\n  const getDaysCount = () => {\r\n    switch (activeTab) {\r\n      case '10days': return 10;\r\n      case 'month': return 14;\r\n      default: return 7;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Tabs activeTab={activeTab} onTabChange={handleTabChange} />\r\n        <div className={s.days} data-days-count={getDaysCount().toString()}>\r\n          {Array.from({ length: getDaysCount() }).map((_, index) => (\r\n            <div key={index} className={s.card}>\r\n              <div className={s.day}>...</div>\r\n              <div className={s.day_info}>...</div>\r\n              <div className={s.icon_id}>\r\n                <GlobalSwgSelector id=\"small_sun\"/>\r\n              </div>\r\n              <div className={s.temp_day}>...</div>\r\n              <div className={s.temp_night}>...</div>\r\n              <div className={s.info}>Загрузка...</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Tabs activeTab={activeTab} onTabChange={handleTabChange} />\r\n      <div className={s.days} data-days-count={days.length.toString()}>\r\n        {days.map((day: Day, index) => (\r\n          <Card \r\n            key={index} \r\n            day={day} \r\n            onClick={() => handleCardClick(day)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Days;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}